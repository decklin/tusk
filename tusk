#!/bin/sh

# Usage:
#
#     tusk -A APP_FILE -n NAME [-w WEBSITE] [-s SCOPES]
#     tusk -a APP_FILE -T TOKEN_FILE
#
#     tusk -t TOKEN_FILE API_RESOURCE [CURL_OPTIONS...]
#
# For a full description and walkthrough, see README.md in the Tusk
# distribution.

case $* in --help) exec sed '1,2d;/^$/,$d;s/^#/ /' "$0"; esac

instance=https://mastodon.social
app_scopes='read write'
while getopts i:A:a:n:w:s:T:t:r: opt; do
    case $opt in
        i) instance=$OPTARG;;
        A) app_file=$OPTARG; create_app=yes;;
        a) app_file=$OPTARG;;
        n) app_name=$OPTARG;;
        w) app_website=$OPTARG;;
        s) app_scopes=$OPTARG;;
        T) token_file=$OPTARG; create_token=yes;;
        t) token_file=$OPTARG;;
        ?) echo "Unknown option: $opt" 1>&2; exit 2;;
    esac
done; shift $(($OPTIND - 1))

oob=urn:ietf:wg:oauth:2.0:oob
auth_base_uri=$instance/oauth
api_base_uri=$instance/api/v1

umask 077

create_app() {
    curl --data-urlencode client_name="$app_name" \
         --data-urlencode redirect_uris="$oob" \
         --data-urlencode scopes="$app_scopes" \
         ${app_website:+--data-urlencode client_website="$app_website"} \
         -o "$app_file" "$api_base_uri"/apps || exit 3
    echo "OK! Created app #$(jq -r .id "$app_file") with client ID $(jq .client_id "$app_file")"
}

create_token() {
    client_id=$(jq -r .client_id "$app_file")
    query=$(curl -s -w '%{url_effective}' --data-urlencode client_id="$client_id" \
                 --data-urlencode response_type=code \
                 --data-urlencode redirect_uri="$oob" \
                 --data-urlencode scope="$app_scopes" -G / | cut -c 3-)
    echo "Open this URL in the browser where you are logged in..."
    echo "    $auth_base_uri/authorize?$query"
    printf '%s: ' 'Please enter the code you got'; read code
    client_secret=$(jq -r .client_secret "$app_file")
    curl --data-urlencode grant_type="authorization_code" \
         --data-urlencode client_id="$client_id" \
         --data-urlencode client_secret="$client_secret" \
         --data-urlencode code="$code" \
         --data-urlencode redirect_uri="$oob" \
         -o "$token_file" "$auth_base_uri/token" || exit 3
    access_token=$(jq -r .access_token "$token_file")
    echo "OK! Created $(jq .token_type "$token_file") token with scope $(jq .scope "$token_file")"
}

if test -n "$app_file" -a -n "$create_app"; then
    create_app
elif test -n "$token_file" -a -n "$create_token"; then
    create_token
elif test -e "$token_file"; then
    access_token=$(jq -r .access_token "$token_file")
    resource=${1#/}; shift
    curl -H "Authorization: Bearer $access_token" "$api_base_uri/$resource" "$@"
else
    echo "Please create an app and/or token (see --help for instructions)" 2>&1
    exit 2
fi
